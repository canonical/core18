#!/bin/sh
#
# This script will try to find a suiteable snapd snap and start
# snapd and its associated services from it.

set -eux

# run_on_unseeded will mount/run snapd on an unseeded system
run_on_unseeded() {
    SEED_SNAPD="$(find /var/lib/snapd/seed/snaps/ -name "snapd_*.snap")"
    if [ ! -e "$SEED_SNAPD" ]; then
        echo "Cannot find a seeded snapd"
        ls /var/lib/snapd/seed/snaps
        exit 1
    fi

    # mount snapd snap and run snapd directly, it will do
    # the seeding and as part of this will restart snapd
    # which will give it the right systemd unit.
    TMPD=$(mktemp -d)
    trap "umount $TMPD; rmdir $TMPD" EXIT
    mount "$SEED_SNAPD" "$TMPD"

    # Show progress on the console while seeding. console-conf
    # will only come up after this unit is finished so without
    # this users will look at a blank screen for a long time.
    (sleep 1 ; "$TMPD"/usr/bin/snap watch --last=seed 2>&1 | tee -a /dev/console )&

    # snapd will write all the needed snapd.{service,socket}
    # units and restart once it seeded the snapd snap
    "$TMPD"/usr/lib/snapd/snapd

    # ensure the snapd.socket gets restarted after seeding, the
    # snapd binary in seeding runs without systemd sockets and
    # will delete its the socket files it created on exit.
    systemctl restart snapd.socket || true
}

# Unseeded systems need to be seeded first, this will start snapd
# and snapd will restart itself after the seeding.
if [ ! -e /var/lib/snapd/state.json ]; then
    if ! run_on_unseeded; then
        echo "cannot run snapd from the seed"
        exit 1
    fi
    exit 0
fi

